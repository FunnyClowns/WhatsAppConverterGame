using UnityEngine;
using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Collections.Generic;

public class WhatsAppConverter : MonoBehaviour
{

    static public List<string> characterDatas{ get; private set; } = new List<string>();
    static public string[] characterNames{ get; private set; } = new string[2];
    static public int limitLine = 50;
    static bool isFileReaded;


    // Regex patterns
    static string timelinePattern = @"\d{2}/\d{2}/\d{2}, \d{1,2}:\d{2}â€¯(?:am|pm) - ";
    static string namePattern = @"^[a-zA-Z]+(?: [a-zA-Z]+)?: ";
    static string mediaMessage = @"^\<Media omitted\>$";
    static string editedMessage = @"\<This message was edited\>";
    public static void ReadFile(string FilePath){

        int lineCount = 0;
        

        Debug.Log(FilePath);

        try{
            using (StreamReader sr = new(FilePath)){
                string line;


                while ((line = sr.ReadLine()) != null && lineCount <= limitLine){
                    lineCount++;

                    if (lineCount != 1 && lineCount <= 50){
                        string lineCleared = Regex.Replace(line, timelinePattern, "");

                        Match lineContents = Regex.Match(line, timelinePattern);
                        Match nameContents = Regex.Match(lineCleared, namePattern);

                        string name = nameContents.Groups[0].Value;
                        string message = lineCleared.Substring(nameContents.Length);

                        if (lineContents.Success){
                            if (nameContents.Success){

                                name = FilterName(name);

                                if (characterNames[0] == null)
                                {
                                    characterNames[0] = name;
                                }
                                else if (characterNames[0] != name && (characterNames[1] == null))
                                {
                                    characterNames[1] = name;
                                }

                                
                                if(FilterMessage(message) != null){

                                    SaveData(name, message);
                                    
                                } else {
                                    lineCount -= 1;
                                }

                            } else{
                                Debug.Log("Error: Player name can't have special symbols.");
                                ErrorHandler.Error("Error: Name cant have any special symbols.");
                                break;
                            }
                            
                        } else{
                            message = lineCleared;
                            message = Regex.Replace(message, editedMessage, "");
                            SaveData(name, message);
                            lineCount -= 1;
                        }

                    } else if (lineCount == limitLine) {
                        break;
                    }
                    
                }
            }

            if (!string.IsNullOrEmpty(characterNames[0]) && !string.IsNullOrEmpty(characterNames[1])){
                Debug.Log($"There are 2 players chatting here: {characterNames[0]} and {characterNames[1]}");
                isFileReaded = true;
            }
            else{
                Debug.Log("Error loading players.");
                ErrorHandler.Error("Error: Loading character name.");
            }
        } catch (Exception e) {
            Debug.Log($"Error reading file: {e.Message}");
            ErrorHandler.Error($"Error reading files: {e.Message}");
        }

    }


    static int charNum;
    static void SaveData(string name, string message){

        string data;

        if(characterNames[0] == name){
            charNum = 1;
        } else if(characterNames[1] == name){
            charNum = 2;
        }

        data = charNum.ToString() + message;

        characterDatas.Add(data);

    }

    static bool isAutoGeneratedMessages(string message){
        Match messageContents = Regex.Match(message, mediaMessage);

        return !messageContents.Success;
    }

    static public bool IsReady(){
        return isFileReaded;
    }

    static string FilterName(string name){
        name = name.Remove(name.Length - 2);
        name = name[..1].ToUpper() + name[1..];

        return name;
    }

    static string FilterMessage(string message){
        message = Regex.Replace(message, editedMessage, "");

        if (isAutoGeneratedMessages(message)){
            return message;
        } else {
            return null;
        }

    }
}
